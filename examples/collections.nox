// Collections are iterable, they can produce their elements
// * Lists (aka js arrays)
// * Tuples
// * Sets
// * Dicts  (aka simple js objects)

// For sanity, they always remember their input order!

// equality?
(1, 2) == [1, 2]
{1, 2} == {1: 1, 2: 2}


// 3..6 is shorthand for range(3, 6), a lazy iterable
// Tuple(3..6) on a dynamic range is illegal as it cannot be typed

// Set(3..6) or {3..6} would produce { 3,4,5,6 }
// List(3..6) or [3..6] would produce [ 3,4,5,6 ]
// Dict(x: 1 for x in 3..6) or {x: 1 for x in 3..6} would produce {3:1,4:1,5:1,6:1}


generator func foo(): Iterable<Int> {
  mut n = 0
  for (;;) {
    yield n++
  }
}


generator func range(start: Int, end: Int): Iterable<Int> {
  mut x = start
  while (x <= end) {
    yield x++
  }
}
