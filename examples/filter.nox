// Fully imperative
func filter(items: T[], pred: T -> Bool): T[] {
    mut result = []
    for (item in items) {
        if (pred(item)) {
            result.append(item)
        }
    }
    return result
}


// Thru list comprehensions
func filter(items: T[], pred: T -> Bool): T[] {
    return [for (x in items) => if pred(x) => x]
}


// Or full FP style (enables tail recursion?)
func filter(items: T[], pred: T -> Bool): T[] {
    return items
        | []       -> []
        | [x, ..y] -> pred(x) ? [x, ..filter(items, pred)] : filter(items, pred)
}


// Or hybrid style
func filter(items: T[], pred: T -> Bool): T[] {
    return items
        | []        -> []
        | [x, ..xs] -> {
              tail = filter(xs, pred)
              return pred(x) ? [x:tail] : tail
          }
}
