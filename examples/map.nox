import { count } from itertools


// Fully imperative
func map(items: Iterable<T>, mapper: T -> V): V[] {
  let result = []
  for (item in items) {
    result.append(mapper(item))
  }
  return result
}


// Thru list comprehensions
func map(items: T[], mapper: T -> V): V[] {
  return [for (item in items) => mapper(item)]
}


even_numbers = (for x in count() if x % 2 == 0 yield x)
odd_numbers  = (for x in count() if x % 2 != 0 yield x)


func flatmap(items: Iterable<Iterable<T>>, mapper: T -> Iterable<V>): Generator<T> {
  return (for (item in items) =>
              for (x in mapper(item)) =>
                  x)
}


func flatmap(items: Iterable<Iterable<T>>, mapper: T -> Iterable<V>): T[] {
  return [for (item in items) =>
              for (x in mapper(item)) =>
                  x]
}
