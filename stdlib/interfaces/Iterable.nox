import { repeat } from iteration


interface Iterable<T> {
    iter(a: Self): Iterator<T>
}


type Bag<T> = {
    items: Dict<T, Int>
}


implement Iterable<T> for Bag<T> {
    iter(self: Bag<T>): Iterator<T> {
        for (key, count) in self.items.pairs() {
            yield from repeat(key, count)
        }
    }
}


func Bag(): Bag<T> {
    return {}
}


@on Bag
func add(self: Bag<T>, item: T): Bag<T> {
    count = self.get(item) ?? 0
    return self.set(item, count + 1)
}
