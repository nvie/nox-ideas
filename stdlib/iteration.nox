import { identity } from operators


union StrOrInt =
    | :String String
    | :Int Int


union TextOrNumber =
    | :Text String
    | :Number Int


alias Pred T = T => Bool


func first <T>(iterable: Iterable<T>): T? {
  return iterable
    | []       -> :Nothing
    | [x, ..]  -> :Just x
}


func last <T>(iterable: Iterable<T>): T? {
  return iterable
    | []       -> :Nothing
    | [.., x]  -> :Just x
}


export
func all <T>(iterable: Iterable<T>, pred: Pred<T> = identity): Bool {
    for item in iterable {
        if !pred(item) {
            return :False
        }
    }
    return :True
}


export
func any <T>(iterable: Iterable<T>, pred: Pred<T> = identity): Bool {
    for item in iterable {
        if pred(item) {
            return :True
        }
    }
    return :False
}


export
func contains <T>(haystack: Iterable<T>, needle: T): Bool {
    // return any(haystack, curry(Operator.==, needle))
    // return any(haystack, Operator.==(?, needle))
    // return any(haystack, ? == needle)
    return any(haystack, x => x == needle)
}


export
generator func enumerate <T>(iterable: Iterable<T>, start: Int = 0): Generator<(Int, T)> {
    mut index = start
    for item in iterable {
        yield (index++, item)
    }
}


export
generator func iterate <T>(start: T, f: T => T): Generator<T> {
    mut x = start
    yield x
    forever {
        x = f(x)
        yield x
    }
}


export
func count (start: Int, step: Int): Generator<Int> {
    return iterate(start, x => x + step)
}


export
generator func cycle (alts: Iterable<T>): Generator<T> {
    alts = List alts
    mut index = 0
    forever {
        yield alts[index++]
    }
}


export
func range (start: Int = 0, end: Int?, step: Int = 1): Generator<Int> {
    if step == 0 {
        return repeat(start)
    }

    counter = count(start, step)
    return end
        | :Nothing  -> counter
        | :Just end -> {
            pred = (step > 0)
                ? n => n < end
                : n => n > end
            return takewhile(counter, pred)
        }
}


export
generator func repeat <T>(value: T, times: Int?): Generator<T> {
    gen = (value for _ in range())
    if times ?= :Just n {
        return take(n, gen)
    } else {
        return gen
    }
}


export
generator func take <T>(n: Int, iterable: Iterable<T>): Generator<T> {
    it = iter(iterable)
    mut counter = n
    while counter-- > 0 {
        // TODO: Figure out a good hybrid syntax for when the results are
        // statements, not expressions
        result = it.next()
        if it.next() ?= :Just value {  // ?= as a pattern matching operator?
            yield value
        } else /* (result ?= Nothing) */ {
            /* Iterable exhausted, quit early */
            return
        }
    }
}


export
generator func takewhile <T>(iterable: Iterable<T>, pred: Pred<T>): Generator<T> {
    for item in iterable {
        if !pred(item) {
            return
        }
        yield item
    }
}
